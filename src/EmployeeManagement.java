
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.awt.print.PrinterException;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.coobird.thumbnailator.Thumbnails;
import net.proteanit.sql.DbUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sweet
 */
public class EmployeeManagement extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeManagement
     */
    public EmployeeManagement() {
        initComponents();
         conn = MySQLConnect.getConnection();
         String sql = "SELECT * FROM employees";
         updateTableData(sql);
         disableAll();
         tfSearch.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                searchFilter();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                searchFilter();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
         });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpGender = new javax.swing.ButtonGroup();
        rbtTemp = new javax.swing.JRadioButton();
        mainContainer = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbEmployeeID = new javax.swing.JLabel();
        lbEmployeeName = new javax.swing.JLabel();
        lbGender = new javax.swing.JLabel();
        lbAge = new javax.swing.JLabel();
        lbBloodGroup = new javax.swing.JLabel();
        lbContactNumber = new javax.swing.JLabel();
        lbQualification = new javax.swing.JLabel();
        lbDOJ = new javax.swing.JLabel();
        tfEmployeeName = new javax.swing.JTextField();
        tfEmployeeID = new javax.swing.JTextField();
        rbtMale = new javax.swing.JRadioButton();
        rbtFemale = new javax.swing.JRadioButton();
        tfAge = new javax.swing.JTextField();
        cmbBloodGroup = new javax.swing.JComboBox<>();
        cmbQualification = new javax.swing.JComboBox<>();
        tfContactNumber = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taAddress = new javax.swing.JTextArea();
        btnUploadImage = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        tfImagePath = new javax.swing.JTextField();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        lbImage = new javax.swing.JLabel();
        jdcDOJ = new com.toedter.calendar.JDateChooser();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        lbSearch = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtableEmp = new javax.swing.JTable();

        btnGrpGender.add(rbtTemp);
        rbtTemp.setText("jRadioButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbEmployeeID.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lbEmployeeID.setText("Employee ID");

        lbEmployeeName.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lbEmployeeName.setText("Employee Name");

        lbGender.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lbGender.setText("Gender");

        lbAge.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lbAge.setText("Age");

        lbBloodGroup.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lbBloodGroup.setText("Blood Group");

        lbContactNumber.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lbContactNumber.setText("Contact Number");

        lbQualification.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lbQualification.setText("Qualification");

        lbDOJ.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        lbDOJ.setText("DOJ");

        tfEmployeeName.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tfEmployeeName.setNextFocusableComponent(rbtMale);
        tfEmployeeName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfEmployeeNameActionPerformed(evt);
            }
        });

        tfEmployeeID.setEditable(false);
        tfEmployeeID.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tfEmployeeID.setEnabled(false);
        tfEmployeeID.setNextFocusableComponent(tfEmployeeName);
        tfEmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfEmployeeIDActionPerformed(evt);
            }
        });

        btnGrpGender.add(rbtMale);
        rbtMale.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        rbtMale.setText("Male");
        rbtMale.setNextFocusableComponent(rbtFemale);
        rbtMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtMaleActionPerformed(evt);
            }
        });

        btnGrpGender.add(rbtFemale);
        rbtFemale.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        rbtFemale.setText("Female");
        rbtFemale.setNextFocusableComponent(tfAge);
        rbtFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtFemaleActionPerformed(evt);
            }
        });

        tfAge.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tfAge.setNextFocusableComponent(cmbBloodGroup);
        tfAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAgeActionPerformed(evt);
            }
        });

        cmbBloodGroup.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cmbBloodGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-" }));
        cmbBloodGroup.setSelectedIndex(-1);
        cmbBloodGroup.setNextFocusableComponent(tfContactNumber);
        cmbBloodGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBloodGroupActionPerformed(evt);
            }
        });

        cmbQualification.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        cmbQualification.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BCom.", "BE / BTech", "Law", "BSc", "CS", "Others" }));
        cmbQualification.setSelectedIndex(-1);
        cmbQualification.setNextFocusableComponent(taAddress);
        cmbQualification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbQualificationActionPerformed(evt);
            }
        });

        tfContactNumber.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tfContactNumber.setNextFocusableComponent(cmbQualification);
        tfContactNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfContactNumberActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        jLabel9.setText("Address");

        taAddress.setColumns(20);
        taAddress.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        taAddress.setRows(5);
        taAddress.setNextFocusableComponent(btnUploadImage);
        jScrollPane1.setViewportView(taAddress);

        btnUploadImage.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        btnUploadImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/image upload.png"))); // NOI18N
        btnUploadImage.setText("Upload Image");
        btnUploadImage.setNextFocusableComponent(tfImagePath);
        btnUploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImageActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel10.setText("Image Path");

        tfImagePath.setEditable(false);
        tfImagePath.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tfImagePath.setNextFocusableComponent(lbImage);
        tfImagePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfImagePathActionPerformed(evt);
            }
        });

        jDesktopPane1.setBackground(new java.awt.Color(153, 153, 153));

        lbImage.setForeground(new java.awt.Color(255, 255, 255));
        lbImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lbImage.setNextFocusableComponent(tfSearch);

        jDesktopPane1.setLayer(lbImage, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbImage, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbEmployeeName)
                    .addComponent(lbEmployeeID)
                    .addComponent(lbGender)
                    .addComponent(lbAge)
                    .addComponent(lbBloodGroup)
                    .addComponent(lbContactNumber)
                    .addComponent(lbQualification)
                    .addComponent(lbDOJ))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rbtMale)
                        .addGap(18, 18, 18)
                        .addComponent(rbtFemale))
                    .addComponent(tfEmployeeName)
                    .addComponent(tfEmployeeID)
                    .addComponent(tfAge)
                    .addComponent(cmbBloodGroup, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbQualification, 0, 160, Short.MAX_VALUE)
                    .addComponent(tfContactNumber)
                    .addComponent(jdcDOJ, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(22, 22, 22)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUploadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDesktopPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbEmployeeID)
                                    .addComponent(tfEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbEmployeeName)
                                    .addComponent(tfEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbGender)
                                    .addComponent(rbtMale)
                                    .addComponent(rbtFemale))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbAge)
                                    .addComponent(tfAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbBloodGroup)
                                    .addComponent(cmbBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbContactNumber)
                                    .addComponent(tfContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lbQualification)
                                    .addComponent(cmbQualification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUploadImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jdcDOJ, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbDOJ)
                                .addComponent(jLabel10)
                                .addComponent(tfImagePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jPanel6.add(jPanel2);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new-icon.png"))); // NOI18N
        btnNew.setText("New");
        btnNew.setNextFocusableComponent(btnSave);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Save-icon.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setEnabled(false);
        btnSave.setNextFocusableComponent(btnUpdate);
        btnSave.setOpaque(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.setNextFocusableComponent(btnDelete);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.setNextFocusableComponent(btnClear);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clear.png"))); // NOI18N
        btnClear.setText("Clear");
        btnClear.setEnabled(false);
        btnClear.setNextFocusableComponent(btnPrint);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnPrint.setIcon(new javax.swing.ImageIcon("C:\\Users\\sweet\\Documents\\AdvancedJava\\jdbc\\images\\printer.png")); // NOI18N
        btnPrint.setText("Print");
        btnPrint.setEnabled(false);
        btnPrint.setNextFocusableComponent(jtableEmp);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        tfSearch.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tfSearch.setNextFocusableComponent(btnNew);

        lbSearch.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        lbSearch.setText("SEARCH");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(lbSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNew)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(18, 18, 18)
                .addComponent(btnClear)
                .addGap(18, 18, 18)
                .addComponent(btnPrint)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnSave)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnClear)
                    .addComponent(btnPrint)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbSearch))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel7.add(jPanel4);

        jtableEmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtableEmp.setNextFocusableComponent(tfEmployeeID);
        jtableEmp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtableEmpMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jtableEmp);

        javax.swing.GroupLayout mainContainerLayout = new javax.swing.GroupLayout(mainContainer);
        mainContainer.setLayout(mainContainerLayout);
        mainContainerLayout.setHorizontalGroup(
            mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1532, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainContainerLayout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        mainContainerLayout.setVerticalGroup(
            mainContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainContainerLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertEmployee(){
        String sql = "INSERT INTO employees(name, gender, age, blood_group, contact, qualification, doj, address, image) VALUES(?, ?, ?, ?,?, ?, ?, ?, ?)";
        String name = tfEmployeeName.getText();
        String age = tfAge.getText();
        String bloodGroup = cmbBloodGroup.getSelectedItem().toString();
        String contact = tfContactNumber.getText();
        String qualification = cmbQualification.getSelectedItem().toString();
        
        Date selectedDate = jdcDOJ.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = sdf.format(selectedDate);
//        JOptionPane.showMessageDialog(null, formattedDate);
        String address = taAddress.getText();
        try {
            ps = conn.prepareStatement(sql);
            ps.setString(1, name);
            ps.setString(2, gender);
//            ps.setInt(3, Integer.parseInt(age));
            ps.setString(3, age);
            ps.setString(4, bloodGroup);
            ps.setString(5, contact);
            ps.setString(6, qualification);
            ps.setString(7, formattedDate);
            ps.setString(8, address);
            ps.setBytes(9, byteImage);
            
            ps.execute();
            JOptionPane.showMessageDialog(null, "Record Inserted Successfully!");
            clearAllFields();
            String sqlQueryData = "SELECT * FROM employees";
            updateTableData(sqlQueryData);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "DB ISSUE : " + ex.getMessage());
        }
    }
    
    private void updateEmployee(){
        if(!"".equals(tfEmployeeID.getText())){
            String sql = "UPDATE employees SET name = ?, gender = ?, age = ?, blood_group = ?, contact = ?, qualification = ?, doj = ?, address = ?, image = ? WHERE id = ?";
            String name = tfEmployeeName.getText();
            String age = tfAge.getText();
            String bloodGroup = cmbBloodGroup.getSelectedItem().toString();
            String contact = tfContactNumber.getText();
            String qualification = cmbQualification.getSelectedItem().toString();

            Date selectedDate = jdcDOJ.getDate();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String formattedDate = sdf.format(selectedDate);
    //        JOptionPane.showMessageDialog(null, formattedDate);
            String address = taAddress.getText();
            try {
                ps = conn.prepareStatement(sql);
                ps.setString(1, name);
                ps.setString(2, gender);
    //            ps.setInt(3, Integer.parseInt(age));
                ps.setString(3, age);
                ps.setString(4, bloodGroup);
                ps.setString(5, contact);
                ps.setString(6, qualification);
                ps.setString(7, formattedDate);
                ps.setString(8, address);
                ps.setBytes(9, byteImage);
                ps.setInt(10, Integer.parseInt(tfEmployeeID.getText()));
                
                ps.execute();
                clearAllFields();
                String sqlQueryData = "SELECT * FROM employees";
                updateTableData(sqlQueryData);
                
                JOptionPane.showMessageDialog(null, "Record Updated!");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "DB ISSUE : " + ex.getMessage());
            }
        }
    }
    private void searchFilter(){
        String key = tfSearch.getText();
        String sql;
        if(!key.equals("")){
            sql = "SELECT * FROM employees WHERE name like '%" + key + "%' or contact like '%"+ key + "%'";
        }else{
            sql = "SELECT * FROM employees";
        }
        updateTableData(sql);
    }
    private DefaultTableModel getMyTableModel(TableModel dtm){
        int nRow = dtm.getRowCount();
        int nCol = dtm.getColumnCount();
        
        Object[][] tableData = new Object[nRow][nCol];
        for(int i = 0; i<nRow; i++){
            for(int j=0; j<nCol; j++){
                tableData[i][j] = dtm.getValueAt(i, j);
            }
        }
        String[] colHeads = {"ID", "Name", "Gender", "Age", "Blood Group", "Contact No.", "Qualification", "DOJ", "Address", "Image"};
        DefaultTableModel myModel = new DefaultTableModel(tableData, colHeads){;
            @Override
            public boolean isCellEditable(int row, int col){
                return false;
            }
        };
        return myModel;
    }
    private void updateTableData(String sql){
        
        try {
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();
            jtableEmp.setModel(getMyTableModel(DbUtils.resultSetToTableModel(rs)));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Issue : " + ex.getMessage());
        }
    }
    
    private void disableAll(){
        tfEmployeeID.setEnabled(false);
        tfEmployeeName.setEnabled(false);
        rbtMale.setEnabled(false);
        rbtFemale.setEnabled(false);
        tfAge.setEnabled(false);
        cmbBloodGroup.setEnabled(false);
        tfContactNumber.setEnabled(false);
        cmbQualification.setEnabled(false);
        jdcDOJ.setEnabled(false);
        taAddress.setEnabled(false);
        tfImagePath.setEnabled(false);
    }
    private void enableAll(){
        tfEmployeeID.setEnabled(true);
        tfEmployeeName.setEnabled(true);
        rbtMale.setEnabled(true);
        rbtFemale.setEnabled(true);
        tfAge.setEnabled(true);
        cmbBloodGroup.setEnabled(true);
        tfContactNumber.setEnabled(true);
        cmbQualification.setEnabled(true);
        jdcDOJ.setEnabled(true);
        taAddress.setEnabled(true);
        tfImagePath.setEnabled(true);
    }
    private void clearAllFields(){
        tfEmployeeName.setText("");
        tfEmployeeID.setText("");
        gender = "";
        rbtTemp.setSelected(true);
        tfAge.setText("");
        cmbBloodGroup.setSelectedIndex(-1);
        tfContactNumber.setText("");
        cmbQualification.setSelectedIndex(-1);
        jdcDOJ.setDate(null);
        taAddress.setText("");
        tfImagePath.setText("");
        lbImage.setIcon(null);
    }
    private void tfAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfAgeActionPerformed

    private void rbtMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtMaleActionPerformed
        // TODO add your handling code here:
        gender = "Male";
    }//GEN-LAST:event_rbtMaleActionPerformed

    private void tfEmployeeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfEmployeeIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfEmployeeIDActionPerformed

    private void tfEmployeeNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfEmployeeNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfEmployeeNameActionPerformed

    private void cmbQualificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbQualificationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbQualificationActionPerformed

    private void tfContactNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfContactNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfContactNumberActionPerformed

    private void btnUploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImageActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png", "bmp"));
        chooser.showOpenDialog(this);
        File source = chooser.getSelectedFile();
        if(source != null){
            String sourceFilePath = source.getAbsolutePath();
            tfImagePath.setText(sourceFilePath);
            BufferedImage thumbnail;
            try{
                thumbnail = Thumbnails.of(source).size(250,290).asBufferedImage();
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                ImageIO.write(thumbnail, "jpg", baos);
                byteImage = baos.toByteArray();
                lbImage.setIcon(new ImageIcon(thumbnail));
            }catch(Exception e){
                
            }
            
        }
    }//GEN-LAST:event_btnUploadImageActionPerformed

    private void tfImagePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfImagePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfImagePathActionPerformed
    /**
     * If you want to manipulate the way your table is presented when you print it you can use the TableModel to programmatically create a table and then print it.
     * @param evt 
     */
    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        MessageFormat header = new MessageFormat("Employee Details!");
        MessageFormat footer = new MessageFormat("Page - {0,number,integer}");
        try {
            jtableEmp.print(JTable.PrintMode.NORMAL, header, footer);
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(this, "Some Error While Printing!");
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void cmbBloodGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBloodGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbBloodGroupActionPerformed
   
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(operation == INSERT){
            insertEmployee();
        }else if(operation == UPDATE){
            updateEmployee();
        }
        disableAll();
        btnSave.setEnabled(false);
        btnNew.setEnabled(true);
    }//GEN-LAST:event_btnSaveActionPerformed

    private void rbtFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtFemaleActionPerformed
        // TODO add your handling code here:
        gender = "Female";
    }//GEN-LAST:event_rbtFemaleActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void jtableEmpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtableEmpMouseClicked
        // TODO add your handling code here:
        int selectedRow = jtableEmp.getSelectedRow();
        String selectedEmpID = jtableEmp.getModel().getValueAt(selectedRow, 0).toString();
        
        try {
            String sql = "SELECT * FROM employees WHERE id = " + selectedEmpID;
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();
            
            if(rs.next()){
                tfEmployeeID.setText(rs.getString("id"));
                tfEmployeeName.setText(rs.getString("name"));
                
                String dbGender = rs.getString("gender");
                if("Male".equals(dbGender)){
                    rbtMale.setSelected(true);
                    gender = "Male";
                }else if("Female".equals(dbGender)){
                    rbtFemale.setSelected(true);
                    gender = "Female";
                }
                
                tfAge.setText(rs.getString("age"));
                cmbBloodGroup.setSelectedItem(rs.getString("blood_group"));
                tfContactNumber.setText(rs.getString("contact"));
                cmbQualification.setSelectedItem(rs.getString("qualification"));
                
                String dbDOJ = rs.getString("doj");
                Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dbDOJ);
                jdcDOJ.setDate(date);
                
                taAddress.setText(rs.getString("address"));
                
                byteImage = rs.getBytes("image");
                BufferedImage image = ImageIO.read(new ByteArrayInputStream(byteImage));
                ImageIcon icon = new ImageIcon(image);
                lbImage.setIcon(icon);
                btnUpdate.setEnabled(true);
                btnDelete.setEnabled(true);
            }
        } catch (SQLException | ParseException | IOException ex) {
            JOptionPane.showMessageDialog(null, "Issue : " + ex.getMessage());
        }
    }//GEN-LAST:event_jtableEmpMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int ans = JOptionPane.showConfirmDialog(null, "Are you sure, you want to delete?", "Delete!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(ans == JOptionPane.YES_OPTION){
            String sql = "DELETE FROM employees WHERE id = ?";
            try {
                ps = conn.prepareStatement(sql);
                ps.setInt(1, Integer.parseInt(tfEmployeeID.getText()));
                ps.execute();
                clearAllFields();
                String sqlUpdateTable = "SELECT * FROM employees";
                updateTableData(sqlUpdateTable);
                JOptionPane.showMessageDialog(null, "Record Deleted!");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Issue : " + ex.getMessage());
            }
        }else if(ans == JOptionPane.NO_OPTION){
            //YOU PRESSED NO!
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        clearAllFields();
        enableAll();
        btnSave.setEnabled(true);
        btnNew.setEnabled(true);
        operation = INSERT;
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        operation  = UPDATE;
        enableAll();
        btnSave.setEnabled(true);
        btnNew.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }//GEN-LAST:event_btnUpdateActionPerformed

    /*
    /**
     * @param args the command line arguments
     */
    /**
     * It should be noted that the main thread is known as the 'demon' thread, i.e. it will spawn all the threads and then exit in the end.
     * Whenever the OS asks the application whether it's working then it's the responsibility of main thread to respond hence it is important to keep it as light as possible.
     * If the main thread isn't light then you will get error of "Application Not Responding".
    */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new EmployeeManagement().setVisible(true);
//            }
//        });
    }
    public void close(){
        WindowEvent we = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(we);
    }
    private static final int NOP = 0;
    private static final int INSERT = 1;
    private static final int UPDATE = 2;
    private int operation = NOP;
    private byte byteImage[] = null;
    private String gender = null;
    private PreparedStatement ps = null;
    private Connection conn = null;
    private ResultSet rs = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.ButtonGroup btnGrpGender;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUploadImage;
    private javax.swing.JComboBox<String> cmbBloodGroup;
    private javax.swing.JComboBox<String> cmbQualification;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdcDOJ;
    private javax.swing.JTable jtableEmp;
    private javax.swing.JLabel lbAge;
    private javax.swing.JLabel lbBloodGroup;
    private javax.swing.JLabel lbContactNumber;
    private javax.swing.JLabel lbDOJ;
    private javax.swing.JLabel lbEmployeeID;
    private javax.swing.JLabel lbEmployeeName;
    private javax.swing.JLabel lbGender;
    private javax.swing.JLabel lbImage;
    private javax.swing.JLabel lbQualification;
    private javax.swing.JLabel lbSearch;
    private javax.swing.JPanel mainContainer;
    private javax.swing.JRadioButton rbtFemale;
    private javax.swing.JRadioButton rbtMale;
    private javax.swing.JRadioButton rbtTemp;
    private javax.swing.JTextArea taAddress;
    private javax.swing.JTextField tfAge;
    private javax.swing.JTextField tfContactNumber;
    private javax.swing.JTextField tfEmployeeID;
    private javax.swing.JTextField tfEmployeeName;
    private javax.swing.JTextField tfImagePath;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
